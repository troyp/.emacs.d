<!--lmnpop-->
<html style="height:100%"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><base xmlns="http://www.w3.org/1999/xhtml" href="http://www.emacswiki.org/emacs/HelpPlus"></head><body style="margin:0"><div class="wrapper container"><div class="content browse"><p style="outline: medium none;">This page is about the following libraries, which together enhance the Emacs help system:</p><ul><li><tt><a class="local" href="http://www.emacswiki.org/emacs/help-macro%2b.el">help-macro+.el</a></tt></li><li><tt><a class="local" href="http://www.emacswiki.org/emacs/help%2b.el">help+.el</a></tt> (or <tt><a href="http://www.emacswiki.org/emacs/help%2b20.el" class="local">help+20.el</a></tt>, for Emacs 20)</li><li><tt><a class="local" href="http://www.emacswiki.org/emacs/help-fns%2b.el">help-fns+.el</a></tt></li><li><tt><a href="http://www.emacswiki.org/emacs/help-mode%2b.el" class="local">help-mode+.el</a></tt></li></ul><p>Each of these libraries provides enhancements to the standard Emacs library of the same name but without the `<code>+</code>’. Library <tt><a class="local" href="http://www.emacswiki.org/emacs/help%2b20.el">help+20.el</a></tt> is an exception to this naming convention; it enhances standard library <code>help.el</code> for Emacs 20. Library <tt><a href="http://www.emacswiki.org/emacs/help-macro%2b.el" class="local">help-macro+.el</a></tt> works for Emacs 20 and later. The other libraries work with Emacs 22 and later.</p><p><a name="LinksToManuals" class="anchor"></a> </p><div class="toc"><ol><li><a href="#toc1">Help Commands Provide Links to Manuals</a></li><li><a href="#toc2">Keys in Help are Linked to Their Doc</a></li><li><a href="#toc3">New Commands</a></li><li><a href="#toc4">Enhanced Commands</a></li><li><a href="#toc5">Additional Key Bindings</a></li><li><a href="#toc6">Other Enhancements</a></li><li><a href="#toc7">See Also</a></li></ol></div><h2 id="toc1">Help Commands Provide Links to Manuals</h2><p>Pretty much all of the standard help commands (<code>‘describe-face’</code>, <code>‘describe-function’</code>, <code>‘describe-variable’</code>,…), as well as the new help commands described <a class="local anchor" href="#NewHelpCommands">below</a> (<code>‘describe-keymap’</code>,…), are enhanced by <tt><a class="local" href="http://www.emacswiki.org/emacs/help-fns%2b.el">help-fns+.el</a></tt> (starting with Emacs version 23.2) so that the <code>‘*Help*’</code> window also has a link to the locations in the various manuals (<a href="http://www.emacswiki.org/emacs/Info" class="local">Info</a>) where the given help target is indexed.</p><p>For example, if you do <code>‘C-h f forward-char’</code>, the <code>‘*Help*’</code> buffer has this text, where <code>‘manuals’</code> is a link:</p><pre>  For more information check the manuals.</pre><p>If you click <code>‘manuals’</code> you get an <a href="http://www.emacswiki.org/emacs/Info" class="local">Info</a> buffer that is a menu of the index entries for <code>‘forward-char’</code> in all of the manuals searched. In the case of function <code>‘forward-char’</code> it has two links, one to the <a class="local" href="http://www.emacswiki.org/emacs/ElispManual">ElispManual</a>, one to the <a class="local" href="http://www.emacswiki.org/emacs/EmacsManual">EmacsManual</a>:</p><pre>  * forward-char [elisp]:      (elisp)Character Motion.
  * forward-char [emacs]:      (emacs)Moving Point.</pre><p>Which manuals are searched this way for index entries? You control this using <a class="local" href="http://www.emacswiki.org/emacs/user_option">user option</a> <strong><code>‘help-cross-reference-manuals’</code></strong>. You can have Emacs check <em>all</em> manuals on your system or just a specific set of manuals (or no manuals, to turn off this feature). By default, only the Emacs manual and Elisp manual are searched.</p><p>If, for example, you customize <code>‘help-cross-reference-manuals’</code> so that it searches all manuals, then the manuals link from <code>‘C-h f forward-char’</code> will give you an <a class="local" href="http://www.emacswiki.org/emacs/Info">Info</a> menu something like this:</p><pre>  * forward-char [elisp]:      (elisp)Character Motion.
  * forward-char [emacs]:      (emacs)Moving Point.
  * forward-char [mh-e]:       (mh-e)Processing Mail Tour.</pre><p>Obviously, searching the indexes of all manuals takes more time.</p><p>Option <code>‘help-cross-reference-manuals’</code> also controls whether to check for manual entries before adding the <code>For more information check the manuals.</code> link. By default, there is no check: the link is added even if there might not be any manual entries for the help target. This saves time. When you click the link the target is looked up in the manual indexes, in any case.</p><p><a class="anchor" name="KeyLinks"></a> </p><h2 id="toc2">Keys in Help are Linked to Their Doc</h2><p>Often, key descriptions (names) appearing in help output were provided initially as their associated command names. This provides flexibility, since it is the command that is most important. If a command <code>‘foobar’</code> is rebound from its default key then we want the doc to mention the new key.</p><p>For instance, a <a href="http://www.emacswiki.org/emacs/doc_string" class="local">doc string</a> that uses <code>"the key `\\[forward-char]' does..."</code> results in the output <code>the key `C-f' does...</code>, if <a class="local" href="http://www.emacswiki.org/emacs/command">command</a> <code>‘forward-char’</code> is bound to <a class="local" href="http://www.emacswiki.org/emacs/key">key</a> <code>‘C-f’</code>.</p><p>This association between key and command is lost in the output, however. Starting with Emacs 23, library <tt><a class="local" href="http://www.emacswiki.org/emacs/help-fns%2b.el">help-fns+.el</a></tt> enhances such key names by turning them into links to the doc for the corresponding commands. In the above doc string example, the key name <code>‘C-f’</code> is a link you can click (or hit <code>‘RET’</code> on), to see its doc, that is, the doc for command <code>‘forward-char’</code>.</p><p>This enhancement affects only key names derived using the special doc-string construction `<code>\\[...]</code>’. It has no effect on key names that are hard-coded.</p><p><a class="anchor" name="NewHelpCommands"></a> </p><h2 id="toc3">New Commands</h2><p>The following new commands are provided:</p><ul><li><strong><code>‘describe-command’</code></strong> (<strong><code>‘C-h c’</code></strong>) – Same as <code>‘describe-function’</code>, but only for commands (<a href="http://www.emacswiki.org/emacs/InteractiveFunction" class="local">InteractiveFunction</a>s).</li><li><strong><code>‘describe-option’</code></strong> (<strong><code>‘C-h o’</code></strong>) – Same as <code>‘describe-variable’</code>, but only for user variables (options).</li><li><strong><code>‘describe-option-of-type’</code></strong> (<strong><code>‘C-h C-o’</code></strong>) – Same as <code>‘describe-option’</code>, but you first specify the <em>custom type</em> of the option. Completion is available for both the custom type and the option of the chosen type. With a prefix arg, candidate options are not only those whose custom-type definition matches the chosen type, but also those whose current value satisfies the chosen type. So, for example, with a prefix argument, a variable whose value is a string satisfies a type such as <code>(choice (const :tag "None" nil) string)</code>, (as does a variable whose value is <code>‘nil’</code>). This command is particularly useful if you also use <strong><a class="local" href="http://www.emacswiki.org/emacs/Icicles">Icicles</a></strong>, because you can use substring and regexp matching, and you can use progressive completion to match multiple patterns.</li><li><strong><code>‘describe-keymap’</code></strong> (<strong><code>‘C-h M-k’</code></strong>) – Describe the bindings in a keymap. Enter the keymap <a class="local" href="http://www.emacswiki.org/emacs/variable">variable</a> (e.g., `ctl-x-map`) using completion. (Non-interactively, the argument can be a <a class="local" href="http://www.emacswiki.org/emacs/keymap">keymap</a> itself or a keymap variable.)</li><li><strong><code>‘describe-file’</code></strong> (<strong><code>‘C-h M-f’</code></strong>) – Display information about a file or directory: its type, permissions, size, time of last access/modification/status change, number of links, UID, GID, inode, and device number. Starting with Emacs 22, if the file is an image file and you have command-line tool <code>‘exiftool’</code> installed and in your `<code>$PATH</code>’ or <code>‘exec-path’</code>, then some EXIF data (metadata) about the image is included. See standard Emacs library <code>image-dired.el</code> for more information about <code>‘exiftool’</code>.</li><li><strong><code>‘describe-buffer’</code></strong> (<strong><code>‘C-h B’</code></strong>) – Display information about a buffer. This includes the <code>‘describe-mode’</code> information for the buffer, but it also includes other info: its file name (if any), mode, size in chars, time/date of last display, whether it is modified (unsaved), and whether it is read-only.</li><li>`<strong><code>help-on-click/key</code></strong>’ (<strong><code>‘C-h RET’</code></strong>) – <em>Super</em> help: it gives help on <em>any key/menu</em> sequence or <em>any object</em> clicked with the mouse. Bind it to, for instance, <code>‘C-h RET’</code>. The object can be <em>any part of an Emacs window</em> or <em>any name</em> appearing in a buffer. You can do any of the following:<ul><li>type a <a class="local" href="http://www.emacswiki.org/emacs/KeySequence">KeySequence</a> (e.g. <code>‘C-M-s’</code>)</li><li>choose a menu item (e.g. <code>‘Files’</code> &gt; `<code>Open File...</code>’)</li><li>click on a <a href="http://www.emacswiki.org/emacs/ScrollBar" class="local">ScrollBar</a></li><li>click on the <a class="local" href="http://www.emacswiki.org/emacs/ModeLine">ModeLine</a></li><li>click in the <a class="local" href="http://www.emacswiki.org/emacs/MiniBuffer">MiniBuffer</a></li><li>click on an Emacs-related name in a buffer: <code>‘apropos-documentation’</code> and <code>‘apropos’</code> provide information on the name</li><li>click anywhere else in a buffer: its modes are described</li></ul></li><li><strong><code>‘pop-to-help-toggle’</code></strong> (<strong><code>‘C-h M-o’</code></strong>) – Pop to buffer <code>‘*Help*’</code> or back to the buffer that sent you to <code>‘Help*’</code>. Especially useful if you use non-<code>‘nil’</code> <code>‘pop-up-frames’</code> (it raises and selects the <a href="http://www.emacswiki.org/emacs/Frame" class="local">Frame</a>).</li><li><strong><code>‘save-*Help*-buffer’</code></strong> (<strong><code>‘C-h C-s’</code></strong>) – (Emacs 20 only) Lets you rename the current <code>*Help*</code> buffer as a new buffer <code>*Help*&lt;N&gt;</code>, <code>&lt;N&gt;</code>=2, 3….</li><li><strong><code>‘view-emacs-lisp-news’</code></strong> (<strong><code>‘C-h C-n’</code></strong>) – (Emacs 20 only) Displays information on recent changes to Emacs Lisp.</li></ul><h2 id="toc4">Enhanced Commands</h2><p>The following <em>standard</em> Emacs commands have been <em>improved</em>:</p><ul><li><strong><code>‘describe-function’</code></strong> – Prefix arg means describe a command (<a href="http://www.emacswiki.org/emacs/InteractiveFunction" class="local">InteractiveFunction</a>). Uses <code>‘symbol-nearest-point’</code> instead of <code>‘function-called-at-point’</code> to provide a default value.</li><li><strong><code>‘describe-variable’</code></strong> – Prefix arg means describe a user variable (option). Uses <code>‘symbol-nearest-point’</code> instead of <code>‘variable-at-point’</code> to provide a default value.</li><li><strong><code>‘where-is’</code></strong> – Uses <code>‘symbol-nearest-point’</code> instead of <code>‘function-called-at-point’</code> to provide a default value. Requires that a <em>command</em> be input, not just a function. Removes help window when you’re done with it.</li><li><strong><code>‘locate-library’</code></strong> (<strong><code>‘C-h C-l’</code></strong>) – (Emacs 20 only) Removes help window when you’re done with it.</li><li><strong><code>‘describe-key’</code></strong> – Returns nil if the key sequence is undefined; else returns <code>‘t’</code>. (This feature is used by command <code>‘help-on-click/key’</code>.) Lines that would be overly long are filled (Emacs 22 only).</li><li><strong><code>‘help-with-tutorial’</code></strong>, <strong><code>‘describe-project’</code></strong>, <strong><code>‘view-emacs-news’</code></strong>, <strong><code>‘view-emacs-FAQ’</code></strong> – (Emacs 20 only) Uses a separate window/frame. Removes help window when you’re done with it.</li></ul><h2 id="toc5">Additional Key Bindings</h2><p>The following key bindings have been added:</p><ul><li><strong><code>‘C-h C-a’</code></strong> –  `<tt><u><i>a</i></u>propos</tt>’</li><li><strong><code>‘C-h M-a’</code></strong> –  `<tt><u><i>a</i></u>propos-documentation’</tt></li><li><strong><code>‘C-h C-M-a’</code></strong> –  `<tt>tags-<u><i>a</i></u>propos’</tt></li><li><strong><code>‘C-h B’</code></strong> – `<tt>describe-<u><i>b</i></u>uffer’</tt></li><li><strong><code>‘C-h c’</code></strong> –  `<tt>describe-<u><i>c</i></u>ommand’ (replaces <code>‘describe-key-briefly’</code>)</tt></li><li><strong><code>‘C-h C-c’</code></strong> – <code>‘describe-key-briefly’</code> (replaces <code>‘C-h c’</code>)</li><li><strong><code>‘C-h M-c’</code></strong> –  `<tt>describe-<u><i>c</i></u>opying’ (replaces (<code>‘C-h C-c’</code>)</tt></li><li><strong><code>‘C-h M-k’</code></strong> –  `<tt>describe-<u><i>k</i></u>eymap’</tt></li><li><strong><code>‘C-h C-l’</code></strong> – `<tt>locate-<u><i>l</i></u>ibrary’</tt></li><li><strong><code>‘C-h M-l’</code></strong> – <code>‘find-function-on-key’</code></li><li><strong><code>‘C-h C-n’</code></strong> – `<tt>view-emacs-lisp-<u><i>n</i></u>ews’ (Emacs 20 only)</tt></li><li><strong><code>‘C-h o’</code></strong> – `<tt>describe-<u><i>o</i></u>ption’</tt></li><li><strong><code>‘C-h C-o’</code></strong> – `<tt>describe-<u><i>o</i></u>ption-of-type’</tt></li><li><strong><code>‘C-h M-o’</code></strong> –  `<tt>p<u><i>o</i></u>p-to-help-toggle’</tt></li><li><strong><code>‘C-h C-s’</code></strong> –  `<tt><u><i>s</i></u>ave-*Help*-buffer’ (Emacs 20 only)</tt></li><li><strong><code>‘C-h u’</code></strong> –  <code>‘manual-entry’</code></li><li><strong><code>‘C-h RET’</code></strong> –  <code>‘help-on-click/key’</code></li><li><strong><code>‘mouse-1’</code></strong> –  <code>‘mouse-help-on-click’</code> (not on mode-line)</li><li><strong><code>‘mouse-1’</code></strong> –  <code>‘mouse-help-on-mode-line-click’</code> (mode-line)</li></ul><h2 id="toc6">Other Enhancements</h2><p>Library <tt><a href="http://www.emacswiki.org/emacs/help-mode%2b.el" class="local">help-mode+.el</a></tt> enhances the <code>‘*Help*’</code> buffer by providing <em>links for libraries</em> that are mentioned there – see <a class="local" href="http://www.emacswiki.org/emacs/HelpModePlus">HelpModePlus</a>.</p><p>The doc string for command <code>‘help-for-help’</code> (<code>‘C-h C-h’</code>) was rewritten to be more informative and clearer. Library <tt><a href="http://www.emacswiki.org/emacs/help-macro%2b.el" class="local">help-macro+.el</a></tt> enhances macro <code>‘make-help-screen’</code> (which is used to create the <code>‘help-for-help’</code> display) to play well with <a class="local" href="http://www.emacswiki.org/emacs/frame">frame</a>s (e.g. non-<code>‘nil’</code> <code>‘pop-up-frames’</code>).</p><h2 id="toc7">See Also</h2><ul><li><a class="local" href="http://www.emacswiki.org/emacs/HelpMenuBarPlus">HelpMenuBarPlus</a> – extensions to the <a href="http://www.emacswiki.org/emacs/MenuBar" class="local">MenuBar</a> <strong>Help</strong> menu</li></ul><hr><p><a href="http://www.emacswiki.org/emacs/DrewsElispLibraries" class="local">DrewsElispLibraries</a> referenced here: <a class="inter Lisp" href="/emacs/help-macro+.el"><span class="site">Lisp</span><span class="separator">:</span><span class="interpage">help-macro+.el</span></a>, <a class="inter Lisp" href="/emacs/help+.el"><span class="site">Lisp</span><span class="separator">:</span><span class="interpage">help+.el</span></a>, <a class="inter Lisp" href="/emacs/help+20.el"><span class="site">Lisp</span><span class="separator">:</span><span class="interpage">help+20.el</span></a>, <a href="/emacs/help-fns+.el" class="inter Lisp"><span class="site">Lisp</span><span class="separator">:</span><span class="interpage">help-fns+.el</span></a>, <a class="inter Lisp" href="/emacs/help-mode+.el"><span class="site">Lisp</span><span class="separator">:</span><span class="interpage">help-mode+.el</span></a></p></div><div class="wrapper close container"></div></div>


</body></html>